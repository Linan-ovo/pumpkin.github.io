<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>南瓜酱(✘_✘)</title>
  
  
  <link href="https://pumpkin-ovo.github.io/atom.xml" rel="self"/>
  
  <link href="https://pumpkin-ovo.github.io/"/>
  <updated>2024-11-20T01:48:25.906Z</updated>
  <id>https://pumpkin-ovo.github.io/</id>
  
  <author>
    <name>Pumpkin Violet</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一些名词解释</title>
    <link href="https://pumpkin-ovo.github.io/2024/11/20/PO%E3%80%81VO%E3%80%81BO%E3%80%81DTO/"/>
    <id>https://pumpkin-ovo.github.io/2024/11/20/PO%E3%80%81VO%E3%80%81BO%E3%80%81DTO/</id>
    <published>2024-11-20T01:01:38.257Z</published>
    <updated>2024-11-20T01:48:25.906Z</updated>
    
    <content type="html"><![CDATA[<p>首先来看看他们的全称分别都叫什么吧</p><ul><li>PO：Persistent Object，持久化对象</li><li>VO：Value Object，值对象</li><li>BO：Business Object，业务对象</li><li>DTO：Data Transfer Object，数据传输对象</li></ul><h2 id="PO（Persistent-Object，持久化对象）：">PO（Persistent Object，持久化对象）：</h2><p>定义：PO是与数据库中的表结构一一对应的对象。通常，一个PO类对应数据库中的一张表，PO的属性对应表中的字段。<br>作用：主要用于在Java应用与数据库之间进行数据持久化操作，如通过ORM（对象关系映射）框架（如Hibernate、MyBatis）将PO对象直接映射到数据库记录上，实现数据的CRUD（创建、读取、更新、删除）操作。<br>特点：PO中通常包含了一些与数据库操作相关的注解或配置，如主键标识、字段映射等。</p><h2 id="VO（Value-Object，值对象）：">VO（Value Object，值对象）：</h2><p>定义：VO通常用于封装业务层返回给表示层（如前端）的数据。VO可以包含多个属性，用于表示一个具体的业务场景中的数据组合。<br>作用：主要用于数据封装和传输，特别是从业务层向表示层传输数据时。VO的设计通常根据前端的需求来定制，只包含前端需要展示或处理的数据。<br>特点：VO通常是轻量级的，不包含任何业务逻辑或持久化逻辑，只是一个纯粹的数据容器。</p><h2 id="BO（Business-Object，业务对象）：">BO（Business Object，业务对象）：</h2><p>定义：BO是封装了业务逻辑的对象，通常包含了业务方法或操作。<br>作用：主要用于处理业务逻辑，是业务层的核心组件。BO通过调用DAO（Data Access Object，数据访问对象）或访问服务层来执行具体的业务操作，并将结果封装成VO或DTO返回给调用者。<br>特点：BO中包含了业务逻辑的实现，如用户注册、订单处理等。BO可能会直接操作PO，但通常不会直接暴露给表示层，而是通过DTO或VO进行数据传输。</p><h2 id="DTO（Data-Transfer-Object，数据传输对象）：">DTO（Data Transfer Object，数据传输对象）：</h2><p>定义：DTO是一种用于在不同层（如业务层与表示层）之间传输数据的对象。DTO的设计通常基于服务契约，确保数据传输的一致性和安全性。<br>作用：主要用于在不同系统组件或服务之间传输数据，特别是在需要跨层或跨系统通信时。DTO可以看作是一个数据容器，用于在组件或服务之间传递数据。<br>特点：DTO通常只包含属性，不包含任何业务逻辑或持久化逻辑。DTO的设计通常遵循一定的规范和约定，以确保数据的正确性和安全性。</p><p>以上来自于AI生成，是不是有种好像懂了又好像没懂的感觉？（反正我是T^T）<br>让我用人类听得懂的语言解释一下吧（但是不包对的哦）</p><ul><li>PO：数据库中的实体或表的映射，不可修改，直接从数据库查出来的对象</li><li>VO：在不同层之间传递数据，如前端和后端之间，接收前端参数，返回给查询前端结果</li><li>BO：用于封装业务逻辑和操作（这个似乎很少用到，目前我还没怎么见过）</li><li>DTO：在后端的不同层之间传递数据，例如controller层和service层或者在服务之间结构调用的时候使用DTO<br>现在我们以一个订单的新增操作来了解一下他们的实际应用<br><code>PO</code>创建两个类Order和OrderItem ，对应数据库的表不可修改<br><code>VO</code>创建实体类来接收前端的参数<br><code>DTO</code>不同数据格式但是行为一致的，提供统一的方法入口.假设现在需要同步第三方的订单过来，第三方订单和原来的add接口的数据结构不一致，并且多出支付信息OrderPay orderPay</li></ul><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">PO</button></li><li class="tab"><button type="button" data-href="#-2">PO</button></li><li class="tab"><button type="button" data-href="#-3">VO</button></li><li class="tab"><button type="button" data-href="#-4">VO</button></li><li class="tab"><button type="button" data-href="#-5">Test</button></li><li class="tab"><button type="button" data-href="#-6">DTO</button></li><li class="tab"><button type="button" data-href="#-7">DTO</button></li><li class="tab"><button type="button" data-href="#-8">DTO</button></li><li class="tab"><button type="button" data-href="#-9">DTO</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span>&#123;</span><br><span class="line">    <span class="comment">// 订单id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">// 订单号</span></span><br><span class="line">    <span class="keyword">private</span> String uniqueOrderNo;</span><br><span class="line">    <span class="comment">// 购买人手机</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderItem</span> &#123;</span><br><span class="line">    <span class="comment">// 订单明细id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">// 订单id</span></span><br><span class="line">    <span class="keyword">private</span> Long orderId;</span><br><span class="line">    <span class="comment">// 商品id</span></span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line">    <span class="comment">// 购买数量</span></span><br><span class="line">    <span class="keyword">private</span> Integer quantity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderAddVo</span> &#123;</span><br><span class="line">    <span class="comment">// 订单号</span></span><br><span class="line">    <span class="keyword">private</span> String uniqueOrderNo;</span><br><span class="line">    <span class="comment">// 购买人手机</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="comment">// 订单明细</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;OrderItemAddVo&gt; items;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderItemAddVo</span> &#123;</span><br><span class="line">    <span class="comment">// 商品id</span></span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line">    <span class="comment">// 购买数量</span></span><br><span class="line">    <span class="keyword">private</span> Integer quantity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-5"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value =  &quot;/add&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> ResponseEnvelope&lt;Long&gt;(<span class="meta">@RequestBody</span> OrderAddVo addVo)&#123;</span><br><span class="line">  <span class="comment">// 保存到数据库</span></span><br><span class="line">      <span class="type">Long</span> <span class="variable">orderId</span> <span class="operator">=</span> save(addVo);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEnvelope</span>&lt;&gt;(orderId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-6"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThirdPartyOrder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Order order;</span><br><span class="line">    <span class="keyword">private</span> List&lt;OrderItem&gt; items;</span><br><span class="line">    <span class="keyword">private</span> OrderPay orderPay;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-7"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Order</span>&#123;</span><br><span class="line">    <span class="comment">// 订单号</span></span><br><span class="line">    <span class="keyword">private</span> String uniqueOrderNo;</span><br><span class="line">    <span class="comment">// 购买人手机</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-8"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OrderItem</span>&#123;</span><br><span class="line">    <span class="comment">// 商品id</span></span><br><span class="line">    <span class="keyword">private</span> String productId;</span><br><span class="line">    <span class="comment">// 数量</span></span><br><span class="line">    <span class="keyword">private</span> Integer quantity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-9"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OrderPay</span>&#123;</span><br><span class="line">    <span class="comment">// 支付类型</span></span><br><span class="line">    <span class="keyword">private</span> String payType;</span><br><span class="line">    <span class="comment">// 支付流水号</span></span><br><span class="line">    <span class="keyword">private</span> String panNo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>好了，好像有一点点更懂了但是没完全懂<br>等到更懂得时候再补充吧<br>掰掰~</p>]]></content>
    
    
    <summary type="html">PO、VO、BO、DTO</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Mybatis-Plus</title>
    <link href="https://pumpkin-ovo.github.io/2024/11/19/Mybatis-Plus/"/>
    <id>https://pumpkin-ovo.github.io/2024/11/19/Mybatis-Plus/</id>
    <published>2024-11-18T16:00:00.000Z</published>
    <updated>2024-11-20T06:55:47.893Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如果本文有不清楚的解释或步骤可以直接点击下方链接跳转查看哦~ <psw>图片是在某人图库里面发现的,或许他喜欢风铃公主这样的？</psw></p></blockquote><!-- <div class="btns circle grid5">            <a class="button" href='https://cyborg2077.github.io/2022/09/20/MyBatisPlus/' title='Kyle's Blog'><img src='https://s2.loli.net/2023/11/18/D1mT7ed2uyJkwVG.png'>Kyle's Blog</a>          </div> --><div class="site-card-group"><a class="site-card" href="https://cyborg2077.github.io/2022/09/20/MyBatisPlus/"><div class="img"><img src="/img/封面3.jpg"/></div><div class="info"><img src="https://s2.loli.net/2023/11/18/D1mT7ed2uyJkwVG.png"/><span class="title">Kyle's Blog</span><span class="desc">Mybatis-Plus</span></div></a></div><!-- <div class="tag link"><a class="link-card" title="Mybatis-Plus" href="https://cyborg2077.github.io/2022/09/20/MyBatisPlus/"><div class="left"><img src="/img/封面3.jpg"/></div><div class="right"><p class="text">Mybatis-Plus</p><p class="url">https://cyborg2077.github.io/2022/09/20/MyBatisPlus/</p></div></a></div> --><h1>快速开始Mybatis-Plus</h1><ul><li><code>步骤一：</code>引入Mybatis-Plus依赖，代替Mybatis依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;version&gt;2.3.1&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>步骤二：</code>定义mapper接口并继承BaseMapper</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本文用到的数据库如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 导出 mp 的数据库结构</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `mp` <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci */</span> <span class="comment">/*!80016 DEFAULT ENCRYPTION=&#x27;N&#x27; */</span>;</span><br><span class="line">USE `mp`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 mp.address 结构</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `address` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_id` <span class="type">bigint</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line">  `province` <span class="type">varchar</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;省&#x27;</span>,</span><br><span class="line">  `city` <span class="type">varchar</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;市&#x27;</span>,</span><br><span class="line">  `town` <span class="type">varchar</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;县/区&#x27;</span>,</span><br><span class="line">  `mobile` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;手机&#x27;</span>,</span><br><span class="line">  `street` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;详细地址&#x27;</span>,</span><br><span class="line">  `contact` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;联系人&#x27;</span>,</span><br><span class="line">  `is_default` bit(<span class="number">1</span>) <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;是否是默认 1默认 0否&#x27;</span>,</span><br><span class="line">  `notes` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;备注&#x27;</span>,</span><br><span class="line">  `deleted` bit(<span class="number">1</span>) <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;逻辑删除&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  KEY `user_id` (`user_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">71</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 ROW_FORMAT<span class="operator">=</span>COMPACT;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  mp.address 的数据：~11 rows (大约)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `address` (`id`, `user_id`, `province`, `city`, `town`, `mobile`, `street`, `contact`, `is_default`, `notes`, `deleted`) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">59</span>, <span class="number">2</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;朝阳区&#x27;</span>, <span class="string">&#x27;13900112222&#x27;</span>, <span class="string">&#x27;金燕龙办公楼&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>, b<span class="string">&#x27;1&#x27;</span>, <span class="keyword">NULL</span>, b<span class="string">&#x27;0&#x27;</span>),</span><br><span class="line">(<span class="number">60</span>, <span class="number">1</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;朝阳区&#x27;</span>, <span class="string">&#x27;13700221122&#x27;</span>, <span class="string">&#x27;修正大厦&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="keyword">NULL</span>, b<span class="string">&#x27;0&#x27;</span>),</span><br><span class="line">(<span class="number">61</span>, <span class="number">1</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;浦东新区&#x27;</span>, <span class="string">&#x27;13301212233&#x27;</span>, <span class="string">&#x27;航头镇航头路&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, b<span class="string">&#x27;1&#x27;</span>, <span class="keyword">NULL</span>, b<span class="string">&#x27;0&#x27;</span>),</span><br><span class="line">(<span class="number">63</span>, <span class="number">2</span>, <span class="string">&#x27;广东&#x27;</span>, <span class="string">&#x27;佛山&#x27;</span>, <span class="string">&#x27;永春&#x27;</span>, <span class="string">&#x27;13301212233&#x27;</span>, <span class="string">&#x27;永春武馆&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="keyword">NULL</span>, b<span class="string">&#x27;0&#x27;</span>),</span><br><span class="line">(<span class="number">64</span>, <span class="number">3</span>, <span class="string">&#x27;浙江&#x27;</span>, <span class="string">&#x27;杭州&#x27;</span>, <span class="string">&#x27;拱墅区&#x27;</span>, <span class="string">&#x27;13567809102&#x27;</span>, <span class="string">&#x27;浙江大学&#x27;</span>, <span class="string">&#x27;Hope&#x27;</span>, b<span class="string">&#x27;1&#x27;</span>, <span class="keyword">NULL</span>, b<span class="string">&#x27;0&#x27;</span>),</span><br><span class="line">(<span class="number">65</span>, <span class="number">3</span>, <span class="string">&#x27;浙江&#x27;</span>, <span class="string">&#x27;杭州&#x27;</span>, <span class="string">&#x27;拱墅区&#x27;</span>, <span class="string">&#x27;13967589201&#x27;</span>, <span class="string">&#x27;左岸花园&#x27;</span>, <span class="string">&#x27;Hope&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="keyword">NULL</span>, b<span class="string">&#x27;0&#x27;</span>),</span><br><span class="line">(<span class="number">66</span>, <span class="number">4</span>, <span class="string">&#x27;湖北&#x27;</span>, <span class="string">&#x27;武汉&#x27;</span>, <span class="string">&#x27;汉口&#x27;</span>, <span class="string">&#x27;13967519202&#x27;</span>, <span class="string">&#x27;天天花园&#x27;</span>, <span class="string">&#x27;Thomas&#x27;</span>, b<span class="string">&#x27;1&#x27;</span>, <span class="keyword">NULL</span>, b<span class="string">&#x27;0&#x27;</span>),</span><br><span class="line">(<span class="number">67</span>, <span class="number">3</span>, <span class="string">&#x27;浙江&#x27;</span>, <span class="string">&#x27;杭州&#x27;</span>, <span class="string">&#x27;拱墅区&#x27;</span>, <span class="string">&#x27;13967589201&#x27;</span>, <span class="string">&#x27;左岸花园&#x27;</span>, <span class="string">&#x27;Hopey&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="keyword">NULL</span>, b<span class="string">&#x27;0&#x27;</span>),</span><br><span class="line">(<span class="number">68</span>, <span class="number">4</span>, <span class="string">&#x27;湖北&#x27;</span>, <span class="string">&#x27;武汉&#x27;</span>, <span class="string">&#x27;汉口&#x27;</span>, <span class="string">&#x27;13967519202&#x27;</span>, <span class="string">&#x27;天天花园&#x27;</span>, <span class="string">&#x27;Thomas&#x27;</span>, b<span class="string">&#x27;1&#x27;</span>, <span class="keyword">NULL</span>, b<span class="string">&#x27;0&#x27;</span>),</span><br><span class="line">(<span class="number">69</span>, <span class="number">3</span>, <span class="string">&#x27;浙江&#x27;</span>, <span class="string">&#x27;杭州&#x27;</span>, <span class="string">&#x27;拱墅区&#x27;</span>, <span class="string">&#x27;13967589201&#x27;</span>, <span class="string">&#x27;左岸花园&#x27;</span>, <span class="string">&#x27;Hopey&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="keyword">NULL</span>, b<span class="string">&#x27;0&#x27;</span>),</span><br><span class="line">(<span class="number">70</span>, <span class="number">4</span>, <span class="string">&#x27;湖北&#x27;</span>, <span class="string">&#x27;武汉&#x27;</span>, <span class="string">&#x27;汉口&#x27;</span>, <span class="string">&#x27;13967519202&#x27;</span>, <span class="string">&#x27;天天花园&#x27;</span>, <span class="string">&#x27;Thomas&#x27;</span>, b<span class="string">&#x27;1&#x27;</span>, <span class="keyword">NULL</span>, b<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 mp.user 结构</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">19</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">`username` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;utf8_general_ci&#x27;</span>,</span><br><span class="line">`password` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;utf8_general_ci&#x27;</span>,</span><br><span class="line">`phone` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;注册手机号&#x27;</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;utf8_general_ci&#x27;</span>,</span><br><span class="line">`info` JSON <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;详细信息&#x27;</span>,</span><br><span class="line">`status` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;使用状态（1正常 2冻结）&#x27;</span>,</span><br><span class="line">`balance` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;账户余额&#x27;</span>,</span><br><span class="line">`create_time` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`update_time` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line"><span class="keyword">UNIQUE</span> INDEX `username` (`username`) <span class="keyword">USING</span> BTREE</span><br><span class="line">)</span><br><span class="line">COMMENT<span class="operator">=</span><span class="string">&#x27;用户表&#x27;</span></span><br><span class="line"><span class="keyword">COLLATE</span><span class="operator">=</span><span class="string">&#x27;utf8_general_ci&#x27;</span></span><br><span class="line">ENGINE<span class="operator">=</span>InnoDB</span><br><span class="line">ROW_FORMAT<span class="operator">=</span>COMPACT</span><br><span class="line">AUTO_INCREMENT<span class="operator">=</span><span class="number">5</span></span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  mp.user 的数据：~4 rows (大约)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `phone`, `info`, `status`, `balance`, `create_time`, `update_time`) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;13900112224&#x27;</span>, <span class="string">&#x27;&#123;&quot;age&quot;: 20, &quot;intro&quot;: &quot;佛系青年&quot;, &quot;gender&quot;: &quot;male&quot;&#125;&#x27;</span>, <span class="number">1</span>, <span class="number">1600</span>, <span class="string">&#x27;2023-05-19 20:50:21&#x27;</span>, <span class="string">&#x27;2023-06-19 20:50:21&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Rose&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;13900112223&#x27;</span>, <span class="string">&#x27;&#123;&quot;age&quot;: 19, &quot;intro&quot;: &quot;青涩少女&quot;, &quot;gender&quot;: &quot;female&quot;&#125;&#x27;</span>, <span class="number">1</span>, <span class="number">600</span>, <span class="string">&#x27;2023-05-19 21:00:23&#x27;</span>, <span class="string">&#x27;2023-06-19 21:00:23&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Hope&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;13900112222&#x27;</span>, <span class="string">&#x27;&#123;&quot;age&quot;: 25, &quot;intro&quot;: &quot;上进青年&quot;, &quot;gender&quot;: &quot;male&quot;&#125;&#x27;</span>, <span class="number">1</span>, <span class="number">100000</span>, <span class="string">&#x27;2023-06-19 22:37:44&#x27;</span>, <span class="string">&#x27;2023-06-19 22:37:44&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Thomas&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;17701265258&#x27;</span>, <span class="string">&#x27;&#123;&quot;age&quot;: 29, &quot;intro&quot;: &quot;伏地魔&quot;, &quot;gender&quot;: &quot;male&quot;&#125;&#x27;</span>, <span class="number">1</span>, <span class="number">800</span>, <span class="string">&#x27;2023-06-19 23:44:45&#x27;</span>, <span class="string">&#x27;2023-06-19 23:44:45&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="常用注解">常用注解</h2><p>MybatisPlus中比较常用的几个注解如下：</p><ul><li><p><code>@TableName：</code>用来指定表名</p></li><li><p><code>@TableId：</code>用来指定表中的主键字段信息</p><ul><li>IdType枚举：<ul><li>AUTO：数据库自增长</li><li>INPUT：通过set方法自行输入</li><li>ASSIGN_ID：分配 ID，接口IdentifierGenerator的方法nextId来生成id，默认实现类为DefaultIdentifierGenerator雪花算法</li></ul></li></ul></li><li><p><code>@TableField：</code>用来指定表中的普通字段信息。常见使用类型：</p><ul><li>成员变量名与数据库字段名不一致</li><li>成员变量名以is开头，且是布尔值</li><li>成员变量名与数据库关键字冲突</li><li>成员变量不是数据库字段</li></ul></li></ul><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">简洁示例</button></li><li class="tab"><button type="button" data-href="#-2">详细注释版</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">  <span class="meta">@TableId(value=&quot;id&quot;, type= IdType.Auto)</span></span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line">  <span class="meta">@TableField(&quot;username&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="meta">@TableField(&quot;is_marries&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> Boolean isMarries;</span><br><span class="line">  <span class="meta">@TableField(&quot;`order`&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> Integer order;</span><br><span class="line">  <span class="meta">@TableField(exist = false)</span></span><br><span class="line">  <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用@TableName注解指定这个类映射的数据库表名为&quot;tb_user&quot;</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">// 使用@TableId注解指定这个字段为表的主键，value属性指定数据库表中的列名为&quot;id&quot;，</span></span><br><span class="line">    <span class="comment">// type=IdType.Auto表示主键的生成策略为自动增长（适用于支持自动增长主键的数据库）</span></span><br><span class="line">    <span class="meta">@TableId(value=&quot;id&quot;, type= IdType.Auto)</span></span><br><span class="line">    <span class="keyword">private</span> Long id; <span class="comment">// 用户ID</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用@TableField注解指定这个字段映射到数据库表中的列名为&quot;username&quot;</span></span><br><span class="line">    <span class="meta">@TableField(&quot;username&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 用户名，这里字段名与数据库列名不完全一致（数据库列为username，类字段为name），</span></span><br><span class="line">                         <span class="comment">// 因此需要通过@TableField明确映射关系</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用@TableField注解指定这个字段映射到数据库表中的列名为&quot;is_marries&quot;</span></span><br><span class="line">    <span class="meta">@TableField(&quot;is_marries&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean isMarries; <span class="comment">// 用户是否已婚</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用@TableField注解指定这个字段映射到数据库表中的列名为&quot;order&quot;（由于order是SQL的关键字，</span></span><br><span class="line">    <span class="comment">// 因此使用反引号`将其包围，以避免解析错误）</span></span><br><span class="line">    <span class="meta">@TableField(&quot;`order`&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer order; <span class="comment">// 排序字段或某种顺序标识</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用@TableField注解的exist=false属性表示这个字段不是数据库表中的列，</span></span><br><span class="line">    <span class="comment">// 即这个字段不会被MyBatis-Plus的CRUD操作所考虑（不会被插入到数据库或从数据库查询出来）。</span></span><br><span class="line">    <span class="comment">// 这通常用于一些只在业务逻辑中使用，而不需要持久化到数据库的字段。</span></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> String address; <span class="comment">// 用户地址，这个字段不会被映射到数据库表中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>MyBatisPlus的配置项继承了MyBatis原生配置和一些自己特有的配置。例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.itheima.mp.domain.po</span> <span class="comment">#别名扫包</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">&quot;classpath*:/mapper/**/*.xml&quot;</span> <span class="comment"># Mapper.xml文件地址,默认值</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span> <span class="comment">#是否开启下划线和驼峰的驶射</span></span><br><span class="line">    <span class="attr">cache-enabled:</span> <span class="literal">false</span><span class="comment">#是否开级缓存</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">assian.id</span> <span class="comment"># id为雪花算法生成</span></span><br><span class="line">      <span class="attr">update-strategy:</span> <span class="string">not_null</span> <span class="comment">#更新策略:只更新非空字段</span></span><br></pre></td></tr></table></figure><h2 id="总结MyBatisPlus使用的基本流程">总结MyBatisPlus使用的基本流程</h2><p>① 引入起步依赖<br>② 自定义Mapper基础BaseMapper<br>③ 在实体类上添加注解声明 表信息<br>④ 在application.yml中根据需要添加配置</p><h1>核心功能</h1><h2 id="wrapper">wrapper</h2><p>Wrapper是MyBatis-Plus提供的一种查询条件封装类，用于构建查询条件或更新条件。它是一个抽象类，拥有多个具体的实现类，如QueryWrapper、UpdateWrapper、LambdaQueryWrapper等。这些实现类提供了丰富的方法来构建各种查询或更新条件。<br>wrapper的常用方法：</p><blockquote><p>eq(String column, Object value)：等于查询，相当于SQL中的“=”<br>ne(String column, Object value)：不等于查询，相当于SQL中的“&lt;&gt;”<br>gt(String column, Object value)：大于查询，相当于SQL中的“&gt;”<br>ge(String column, Object value)：大于等于查询，相当于SQL中的“&gt;=”<br>lt(String column, Object value)：小于查询，相当于SQL中的“&lt;”<br>le(String column, Object value)：小于等于查询，相当于SQL中的“&lt;=”<br>like(String column, Object value)：模糊查询，相当于SQL中的“LIKE”<br>in(String column, Collection&lt;?&gt; values)：IN查询，相当于SQL中的“IN”<br>isNull(String column)：为空查询，相当于SQL中的“IS NULL”<br>isNotNull(String column)：不为空查询，相当于SQL中的“IS NOT NULL”<br>orderByAsc(String… columns)：升序排序，相当于SQL中的“ORDER BY … ASC”<br>orderByDesc(String… columns)：降序排序，相当于SQL中的“ORDER BY … DESC”</p></blockquote><h3 id="基于QueryWrapper的查询">基于QueryWrapper的查询</h3><p>需求：<br>①查询出名字中带o的，存款大于等于1000元的人的id、username、info、balance字段<br>②更新用户名为jack的用户的余额为2000</p><ul><li>手写sql文</li></ul><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">需求①</button></li><li class="tab"><button type="button" data-href="#-2">需求②</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id,username,info,balabce</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">WHERE</span> username <span class="keyword">LIKE</span> ? <span class="keyword">AND</span> balance <span class="operator">&gt;=</span> ?</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span></span><br><span class="line">    <span class="keyword">SET</span> balance <span class="operator">=</span> <span class="number">2000</span></span><br><span class="line">    <span class="keyword">WHERE</span> (username <span class="operator">=</span> &quot;jack&quot;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ul><li>使用 QueryWrapper 来构建查询条件并执行查询</li></ul><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">普通版</button></li><li class="tab"><button type="button" data-href="#-2">注释版</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1、构建查询条件</span></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;()</span><br><span class="line">                .select(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;info&quot;</span>,<span class="string">&quot;balance&quot;</span>)</span><br><span class="line">                .like(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;o&quot;</span>)</span><br><span class="line">                .ge(<span class="string">&quot;balance&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//2、查询</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1、构建查询条件</span></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;()</span><br><span class="line">                .select(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;info&quot;</span>,<span class="string">&quot;balance&quot;</span>)</span><br><span class="line">                .like(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;o&quot;</span>)</span><br><span class="line">                .ge(<span class="string">&quot;balance&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//2、查询</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">        <span class="comment">// 3、处理查询结果</span></span><br><span class="line">        <span class="comment">// 使用forEach方法和方法引用遍历查询结果列表</span></span><br><span class="line">        <span class="comment">// 并打印每个User对象的信息（假设User类已正确重写toString方法）</span></span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">       <span class="comment">// 注意：这里的System.out::println是Java 8引入的方法引用语法</span></span><br><span class="line">       <span class="comment">// 它相当于对每个user对象调用System.out.println(user)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 1. QueryWrapper&lt;T&gt;：是MyBatis-Plus提供的查询构造器，用于构建SQL查询条件。 T代表实体类类型，在这个例子中是User类。</span></span><br><span class="line"><span class="comment">// 2. select(...)：指定查询结果中需要包含的列。</span></span><br><span class="line"><span class="comment">// 3. like(...)：添加模糊查询条件。</span></span><br><span class="line"><span class="comment">// 4. ge(...)：添加大于等于的条件，ge是greater than or equal的缩写。</span></span><br><span class="line"><span class="comment">// 5. userMapper：是MyBatis-Plus自动生成的Mapper接口，用于操作数据库。</span></span><br><span class="line"><span class="comment">// 6. selectList(...)：是Mapper接口中的一个方法，用于执行查询并返回结果列表。</span></span><br><span class="line"><span class="comment">// 7. List&lt;T&gt;：是Java中的泛型集合，用于存储T类型的对象。</span></span><br><span class="line"><span class="comment">// 8. forEach(...)：是Java 8引入的Stream API中的一个方法，用于遍历集合。</span></span><br><span class="line"><span class="comment">// 9. System.out::println：是Java 8引入的方法引用语法，用于引用静态方法。</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ul><li>使用QueryWrapper 作为条件更新User表中数据的方法</li></ul><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">普通版</button></li><li class="tab"><button type="button" data-href="#-2">注释版</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdateByQeryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1、要更新的数据</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setBalance(<span class="number">2000</span>);</span><br><span class="line">        <span class="comment">//2、更新条件</span></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;()</span><br><span class="line">                .eq(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">        <span class="comment">//3、执行更新</span></span><br><span class="line">        userMapper.update(user, wrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdateByQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1、要更新的数据</span></span><br><span class="line">    <span class="comment">// 创建一个User对象，用于设置需要更新的字段值</span></span><br><span class="line">    <span class="comment">// 在这个例子中，我们想要将某个用户的balance字段更新为2000</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setBalance(<span class="number">2000</span>); <span class="comment">// 设置balance字段的值为2000</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 注意：这里只设置了需要更新的字段，其他字段将不会被更新。</span></span><br><span class="line">    <span class="comment">// 如果User对象中有其他非空字段，并且这些字段在数据库中有对应的非空约束，</span></span><br><span class="line">    <span class="comment">// 那么在更新时可能会遇到问题，因为MyBatis-Plus默认不会将这些字段设置为NULL，</span></span><br><span class="line">    <span class="comment">// 除非在实体类中使用@TableField注解并设置el=&quot;null&quot;或在全局配置中设置相关策略。</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 2、更新条件</span></span><br><span class="line">    <span class="comment">// 创建一个QueryWrapper实例，用于构建更新操作的条件</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;()</span><br><span class="line">            .eq(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;Jack&quot;</span>); <span class="comment">// 添加一个等于条件，表示只更新username为&#x27;Jack&#x27;的记录</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 3、执行更新</span></span><br><span class="line">    <span class="comment">// 调用userMapper的update方法执行更新操作</span></span><br><span class="line">    <span class="comment">// 该方法接收两个参数：一个是包含更新字段值的User对象，另一个是QueryWrapper对象作为更新条件</span></span><br><span class="line">    userMapper.update(user, wrapper);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 相关说明：</span></span><br><span class="line"><span class="comment">// 1. User：是一个实体类，对应数据库中的User表。</span></span><br><span class="line"><span class="comment">// 2. QueryWrapper&lt;T&gt;：是MyBatis-Plus提供的查询构造器，用于构建SQL查询或更新条件。T代表实体类类型，在这个例子中是User类。</span></span><br><span class="line"><span class="comment">// 3. eq(...)：是QueryWrapper中的一个方法，用于添加等于条件。</span></span><br><span class="line"><span class="comment">// 4. userMapper：是MyBatis-Plus自动生成的Mapper接口的一个实例，用于操作数据库。</span></span><br><span class="line"><span class="comment">// 5. update(...)：是Mapper接口中的一个方法，用于根据提供的条件和更新字段值执行更新操作</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="基于UpdateWrapper的更新">基于UpdateWrapper的更新</h3><p>需求：更新id为1,2,4的用户的余额，扣200</p><ul><li>手写sql</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span></span><br><span class="line">    <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">200</span></span><br><span class="line">    <span class="keyword">WHERE</span> id <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><ul><li>使用UpdateWrapper来构造一个更新条件</li></ul><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">普通版</button></li><li class="tab"><button type="button" data-href="#-2">注释版</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdateWrapper</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Long&gt; ids = List.of(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>);</span><br><span class="line">        UpdateWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;User&gt;()</span><br><span class="line">                .setSql(<span class="string">&quot;balance = balance -200&quot;</span>)</span><br><span class="line">                .in(<span class="string">&quot;id&quot;</span>, ids);</span><br><span class="line">        userMapper.update(<span class="literal">null</span>, wrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdateWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个包含要更新记录ID的列表</span></span><br><span class="line">    List&lt;Long&gt; ids = List.of(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>); <span class="comment">// 这意味着我们将更新ID为1, 2, 3的用户记录</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 创建一个UpdateWrapper对象，用于构造更新条件</span></span><br><span class="line">    UpdateWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;User&gt;()</span><br><span class="line">            <span class="comment">// 使用setSql方法指定要执行的SQL片段，这里是将用户的balance字段减去200</span></span><br><span class="line">            .setSql(<span class="string">&quot;balance = balance - 200&quot;</span>)</span><br><span class="line">            <span class="comment">// 使用in方法指定ID字段的值在提供的ids列表中的记录将被更新</span></span><br><span class="line">            .in(<span class="string">&quot;id&quot;</span>, ids);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 调用userMapper的update方法执行更新操作</span></span><br><span class="line">    <span class="comment">// 注意：第一个参数通常是一个实体对象，用于指定要更新的字段和值（通过setter方法）。</span></span><br><span class="line">    <span class="comment">// 但在这个例子中，我们传递了null，因为我们已经在setSql中指定了更新的SQL片段。</span></span><br><span class="line">    <span class="comment">// 在实际使用中，如果不需要通过实体对象指定更新字段，可以传递null。</span></span><br><span class="line">    userMapper.update(<span class="literal">null</span>, wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="基于LambdaQueryWrapper的查询">基于LambdaQueryWrapper的查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">testLambdaQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1、构建查询条件</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;()</span><br><span class="line">                .select(User::getId, User::getUsername, User::getInfo, User::getBalance)</span><br><span class="line">                .like(User::getUsername,<span class="string">&quot;o&quot;</span>)</span><br><span class="line">                .ge(User::getBalance, <span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//2、查询</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用Lambda表达式来引用实体类的属性，这些属性会被映射到数据库表的字段上，开发者不需要手动填写字段名称，而是直接引用实体类的属性名。<br>Lambda表达式提供了编译时的类型检查，<strong>减少了拼写错误</strong>的可能性。（感觉其实就是避免手残党手误）</p><h3 id="总结条件构造器的用法：">总结条件构造器的用法：</h3><ul><li>QueryWrapper和LambdaQueryWrapper通常用来构建select、delete、update的where条件部分</li><li>UpdateWrapper和LambdaUpdateWrapper通常只有在set语句比较特殊才使用</li><li>尽量使用LambdaQueryWrapper和LambdaUpdateWrapper，避免硬编码</li></ul><h2 id="自定义SQL">自定义SQL</h2><p>利用MyBatisPlus的Wrapper来构建复杂的Where条件，然后自己定义SQL语句中剩下的部分<br>① 基于Wrapper构建where条件<br>② 在mapper方法参数中用Param注解声明wrapper变量名称，必须是ew<br>③ 自定义SQL，并使用Wrapper条件</p><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">UserMapperTest.java</button></li><li class="tab"><button type="button" data-href="#-2">UserMapper.java</button></li><li class="tab"><button type="button" data-href="#-3">UserMapper.xml</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试自定义SQL更新方法，用于更新用户的余额。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testCustomSqlUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1、定义更新条件：指定需要更新余额的用户ID列表</span></span><br><span class="line">    <span class="comment">// 这里我们假设要更新ID为1, 2, 4的用户的余额</span></span><br><span class="line">    List&lt;Long&gt; ids = List.of(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">4L</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2、定义要更新的余额数值，这里设置为200</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">amount</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3、构建查询条件，使用QueryWrapper来指定更新条件</span></span><br><span class="line">    <span class="comment">// 这里我们通过.in(&quot;id&quot;, ids)来指定需要更新的用户ID在ids列表中</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;().in(<span class="string">&quot;id&quot;</span>, ids);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4、调用自定义的Mapper方法来进行更新操作</span></span><br><span class="line">    <span class="comment">// 该方法的作用是根据给定的条件（wrapper）和余额数值（amount）来更新用户的余额。</span></span><br><span class="line">    userMapper.updateBalanceByIds(wrapper, amount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">updateBalanceByIds</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span> QueryWrapper&lt;User&gt; wrapper, <span class="meta">@Param(&quot;amount&quot;)</span><span class="type">int</span> amount)</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=<span class="string">&quot;updateBalanceByIds&quot;</span>&gt;</span><br><span class="line">        UPDATE user</span><br><span class="line">        <span class="type">SET</span> <span class="variable">balance</span> <span class="operator">=</span> balance + #&#123;amount&#125; $&#123;ew.customSqlSegment&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="Service接口">Service接口</h2><h3 id="Service接口使用流程">Service接口使用流程</h3><ul><li>自定义 Service 接口继承 IService 接口</li><li>自定义 Service 实现类，实现自定义接口并继承 ServiceImpl 类</li></ul><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">UserService</button></li><li class="tab"><button type="button" data-href="#-2">UserServiceImpl</button></li><li class="tab"><button type="button" data-href="#-3">IUserServiceTest</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">IUserService</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IUserServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用@Autowired注解自动装配IUserService的bean，这样可以在测试方法中使用userService对象。</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个测试方法，用于测试保存用户信息的功能。</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSaveUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个新的User对象。</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="comment">// 设置用户的用户名。</span></span><br><span class="line">        user.setUsername(<span class="string">&quot;ln&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置用户的密码。</span></span><br><span class="line">        user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置用户的手机号码。</span></span><br><span class="line">        user.setPhone(<span class="string">&quot;13800000000&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置用户的余额。</span></span><br><span class="line">        user.setBalance(<span class="number">200</span>);</span><br><span class="line">        <span class="comment">// 设置用户的个人信息，这里使用JSON字符串存储年龄、介绍和性别。</span></span><br><span class="line">        user.setInfo(<span class="string">&quot;&#123;\&quot;age\&quot;: 22, \&quot;intro\&quot;: \&quot;英文老师\&quot;, \&quot;gender\&quot;: \&quot;female\&quot;&#125;&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置用户的创建时间。</span></span><br><span class="line">        user.setCreateTime(LocalDateTime.now());</span><br><span class="line">        <span class="comment">// 设置用户的更新时间。</span></span><br><span class="line">        user.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        <span class="comment">// 调用userService的save方法保存用户信息。</span></span><br><span class="line">        userService.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个测试方法，用于测试根据ID列表查询用户信息的功能。</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testQuery</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 定义一个包含用户ID的列表，这里假设要查询ID为1, 2, 4的用户。</span></span><br><span class="line">        List&lt;User&gt; users = userService.listByIds(List.of(<span class="number">1L</span>,<span class="number">2L</span>,<span class="number">4L</span>));</span><br><span class="line">        <span class="comment">// 遍历查询结果，并打印每个用户的信息。</span></span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>为了便于进行下面的测试例子，我们来配置一下swagger<br><code>步骤一</code>引入依赖<br><code>步骤二</code>根据自己的项目配置application.yaml<br><code>步骤三</code>成功啦（访问地址是http://localhost:8080/doc.html 写自己用的端口号哦）</p> <div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#-2">application.yaml</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi2-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">knife4j:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">openapi:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">用户管理接口文档</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">&quot;用户管理接口文档&quot;</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">zhanghuyi@itcast.cn</span></span><br><span class="line">    <span class="attr">concat:</span> <span class="string">ln</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://www.itcast.cn</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1.0.0</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">group-name:</span> <span class="string">default</span></span><br><span class="line">        <span class="attr">api-rule:</span> <span class="string">package</span></span><br><span class="line">        <span class="attr">api-rule-resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">com.itheima.mp.controller</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>使用上面的service接口，我们可以直接调用MP提供的方法进行一些简单的CRUD的操作，无需再自己手写service方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户管理接口控制器类</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;用户管理接口&quot;)</span>  <span class="comment">// Swagger标签，用于归类API</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span>  <span class="comment">// Lombok注解，自动注入需要的依赖</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自动注入用户服务</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增用户接口</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userDto 包含用户信息的DTO对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;新增用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(<span class="meta">@RequestBody</span> UserFormDTO userDto)</span> &#123;</span><br><span class="line">        <span class="comment">// 将DTO对象转换为User实体对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> BeanUtil.copyProperties(userDto, User.class);</span><br><span class="line">        <span class="comment">// 调用服务层方法保存用户</span></span><br><span class="line">        userService.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID删除用户接口</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 要删除的用户ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据ID删除用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(<span class="meta">@ApiParam(value = &quot;用户ID&quot;, required = true)</span> <span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用服务层方法根据ID删除用户</span></span><br><span class="line">        userService.removeById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID查询用户接口</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 要查询的用户ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 包含用户信息的VO对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据ID查询用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> UserVO <span class="title function_">queryUserById</span><span class="params">(<span class="meta">@ApiParam(value = &quot;用户ID&quot;, required = true)</span> <span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用服务层方法根据ID获取用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(id);</span><br><span class="line">        <span class="comment">// 将User实体对象转换为VO对象</span></span><br><span class="line">        <span class="keyword">return</span> BeanUtil.copyProperties(user, UserVO.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID集合批量查询用户接口</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids 用户ID集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 包含用户信息的VO对象列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据ID集合批量查询用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;UserVO&gt; <span class="title function_">queryUserByIds</span><span class="params">(<span class="meta">@ApiParam(value = &quot;用户ID集合&quot;, required = true)</span> <span class="meta">@RequestParam(&quot;ids&quot;)</span> List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用服务层方法根据ID集合获取用户列表</span></span><br><span class="line">        List&lt;User&gt; users = userService.listByIds(ids);</span><br><span class="line">        <span class="comment">// 将User实体对象列表转换为VO对象列表</span></span><br><span class="line">        <span class="keyword">return</span> BeanUtil.copyToList(users, UserVO.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这个世界总是这么简单就好了。<br>当我们碰到复杂业务需求时，需自定义Service方法以融入业务逻辑，并在必要时通过自定义Mapper执行特定SQL语句，实现精准数据库操作。<br>这里我们以 根据id扣减余额这 一业务来举例。<br>该业务的复杂性体现在：在获取到用户ID后，首先需要验证用户的状态（status）是否处于正常状态，同时还需要检查用户的余额（balance）是否足够进行扣减。此外，在进行扣减时，要完成“update balance = balance - xxx”的SQL语句，这一操作不建议在业务层完成，最好通过自定义sql语句在数据库层完成。</p><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">UserController</button></li><li class="tab"><button type="button" data-href="#-2">IUserService</button></li><li class="tab"><button type="button" data-href="#-3">ServiceImpl</button></li><li class="tab"><button type="button" data-href="#-4">UserMapper</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping(&quot;/&#123;id&#125;/deduction/&#123;money&#125;&quot;)</span></span><br><span class="line">   <span class="meta">@ApiOperation(&quot;扣减用户余额接口&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deductBalance</span><span class="params">(</span></span><br><span class="line"><span class="params">           <span class="meta">@ApiParam(&quot;用户id&quot;)</span> <span class="meta">@PathVariable(&quot;id&quot;)</span> Long id,</span></span><br><span class="line"><span class="params">           <span class="meta">@ApiParam(&quot;扣减金额&quot;)</span> <span class="meta">@PathVariable(&quot;money&quot;)</span> Integer money)</span>&#123;</span><br><span class="line">       userService.deductBalance(id, money);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扣减余额</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deductBalance</span><span class="params">(Long id, Integer money)</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扣减余额</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deductBalance</span><span class="params">(Long id, Integer money)</span> &#123;</span><br><span class="line">    <span class="comment">//1、查询用户</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="comment">//2、校验用户状态</span></span><br><span class="line">    <span class="comment">//使用反向校验，可以避免if嵌套，使代码更优雅</span></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span> || user.getStatus() == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户状态异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3、查询用户余额是否充足</span></span><br><span class="line">    <span class="keyword">if</span> (user.getBalance() &lt; money) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户余额不足&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4、扣减余额</span></span><br><span class="line">    baseMapper.deductBalance(id, money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减余额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Update(&quot;UPDATE user SET balance = balance - #&#123;money&#125; WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deductBalance</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id, <span class="meta">@Param(&quot;money&quot;)</span> Integer money)</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>完成后可以打开swagger文档，使用调试功能测试一下上述接口是否正常运行</p><h3 id="IService的Lambda操作">IService的Lambda操作</h3><p class='p cyan'>查询</p><p>需求：实现一个根据复杂条件查询用户的接口，查询条件如下：</p><ul><li>name：用户名关键字，可以为空</li><li>status：用户状态，可以为空</li><li>minBalance：最小余额，可以为空</li><li>maxBalance：最大余额，可以为空<br>首先来新建一个名为UserQuery的实体类，封装用户查询时的各种条件。</li><li>原因:一般在处理具有多个可选查询参数的复杂查询时,UserQuery类作为一个数据传输对象（DTO），能够清晰地组织和传递这些查询条件，从而使代码更加模块化和易于维护。</li></ul><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">UserQuery</button></li><li class="tab"><button type="button" data-href="#-2">UserController</button></li><li class="tab"><button type="button" data-href="#-3">IUserService</button></li><li class="tab"><button type="button" data-href="#-4">传统sql</button></li><li class="tab"><button type="button" data-href="#-5">UserServiceImpl</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;用户查询条件实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserQuery</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名关键字&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户状态：1-正常，2-冻结&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;余额最小值&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer minBalance;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;余额最大值&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxBalance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据复杂条件查询用户id&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;UserVO&gt; <span class="title function_">queryUsers</span><span class="params">(UserQuery query)</span>&#123;</span><br><span class="line">        <span class="comment">//1、查询用户PO</span></span><br><span class="line">        List&lt;User&gt; users = userService.queryUsers(query.getName(), query.getStatus(), query.getMinBalance(), query.getMaxBalance());</span><br><span class="line">        <span class="comment">//2、将PO转换为VO</span></span><br><span class="line">        <span class="keyword">return</span> BeanUtil.copyToList(users, UserVO.class);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *根据复杂条件查询用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minBalance</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxBalance</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">queryUsers</span><span class="params">(String name, Integer status, Integer minBalance, Integer maxBalance)</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;queryUsers&quot;</span> resultType=<span class="string">&quot;com.itheima.mp.domain.po.User&quot;</span>&gt;</span><br><span class="line">    SELECT *</span><br><span class="line">    FROM user</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;name != null&quot;</span>&gt;</span><br><span class="line">            AND username LIKE #&#123;name&#125;)</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;status != null&quot;</span>&gt;</span><br><span class="line">            AND `status` = #&#123;status&#125;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;minBalance != null and maxBalance != null&quot;</span>&gt;</span><br><span class="line">            AND balance BETWEEN #&#123;minBalance&#125; AND #&#123;maxBalance&#125;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-5"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据复杂条件查询用户id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> minBalance</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> maxBalance</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">queryUsers</span><span class="params">(String name, Integer status, Integer minBalance, Integer maxBalance)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> lambdaQuery()</span><br><span class="line">            .like(name != <span class="literal">null</span>, User::getUsername, name)</span><br><span class="line">            .eq(status != <span class="literal">null</span>, User::getStatus, status)</span><br><span class="line">            .ge(minBalance != <span class="literal">null</span>, User::getBalance, minBalance)</span><br><span class="line">            .le(maxBalance != <span class="literal">null</span>, User::getBalance, maxBalance)</span><br><span class="line">            .list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p class='p cyan'>更新</p><p>需求：改造根据id修改用户余额的接口，要求如下</p><ul><li>完成对用户状态校验</li><li>完成对用户余额校验</li><li>如果扣减后余额为0，则将用户status修改为冻结状态（2）<br>我们可以对2.3.1的最后一个例子的ServiceImpl代码进行改造,主要是第四步扣减余额以后，再对余额进行判断</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deductBalance</span><span class="params">(Long id, Integer money)</span> &#123;</span><br><span class="line">        <span class="comment">//1、查询用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="comment">//2、校验用户状态</span></span><br><span class="line">        <span class="comment">//使用反向校验，可以避免if嵌套，使代码更优雅</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span> || user.getStatus() == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户状态异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3、查询用户余额是否充足</span></span><br><span class="line">        <span class="keyword">if</span> (user.getBalance() &lt; money) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户余额不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4、扣减余额,然后判断余额是否为0</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">remainBlance</span> <span class="operator">=</span> user.getBalance() - money;</span><br><span class="line">        lambdaUpdate()</span><br><span class="line">                .set(User::getBalance, remainBlance)</span><br><span class="line">                .set(remainBlance == <span class="number">0</span>, User::getStatus, <span class="number">2</span>)</span><br><span class="line">                .eq(User::getId, id)</span><br><span class="line">                .eq(User::getBalance, user.getBalance())</span><br><span class="line">                .update();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="IService批量新增">IService批量新增</h3><p>需求：批量插入10万条用户数据，并作出对比：</p><ul><li>普通for循环插入</li><li>IService的批量插入</li><li>开启rewriteBatchedStatements=true参数后，再使用IService的批量插入</li></ul><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">普通for循环</button></li><li class="tab"><button type="button" data-href="#-2">IService的批量插入</button></li><li class="tab"><button type="button" data-href="#-3">配置application</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">testSaveOneByOne</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">b</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            userService.save(buildUser(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">e</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;耗时：&quot;</span> + (e - b));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">testSaveBatch</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 我们每次批量插入1000条件，插入100次即10万条数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.准备一个容量为1000的集合</span></span><br><span class="line">    List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">1000</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">b</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 2.添加一个user</span></span><br><span class="line">        list.add(buildUser(i));</span><br><span class="line">        <span class="comment">// 3.每1000条批量插入一次</span></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">1000</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            userService.saveBatch(list);</span><br><span class="line">            <span class="comment">// 4.清空集合，准备下一批数据</span></span><br><span class="line">            list.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">e</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;耗时：&quot;</span> + (e - b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> User <span class="title function_">buildUser</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUsername(<span class="string">&quot;user_&quot;</span> + i);</span><br><span class="line">    user.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    user.setPhone(<span class="string">&quot;&quot;</span> + (<span class="number">18688190000L</span> + i));</span><br><span class="line">    user.setBalance(<span class="number">2000</span>);</span><br><span class="line">    <span class="comment">//user.setInfo(UserInfo.of(24, &quot;英文老师&quot;, &quot;female&quot;));</span></span><br><span class="line">    user.setInfo(<span class="string">&quot;&#123;\&quot;age\&quot;: 22, \&quot;intro\&quot;: \&quot;英文老师\&quot;, \&quot;gender\&quot;: \&quot;female\&quot;&#125;&quot;</span>);</span><br><span class="line">    user.setCreateTime(LocalDateTime.now());</span><br><span class="line">    user.setUpdateTime(user.getCreateTime());</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mp?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai&amp;rewriteBatchedStatements=true</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>运行后发现哪个性能最好呢？</p><psw>两短一长选最长 当然是第三种方案性能最好啦</psw><blockquote><p>批处理方案：</p><ul><li>普通for循环逐条插入速度极差，不推荐</li><li>MP的批量新增，基于预编译的批处理，性能不错</li><li>配置jdbc参数，开启rewriteBatchedStatements，性能最好</li></ul></blockquote><h1>扩展功能</h1><h2 id="代码生成器">代码生成器</h2><p>食用步骤：</p><ul><li>下载并安装插件MybatisX（记得重启IDEA哦）</li><li>连接数据库</li><li>找到希望生成代码的表，右键点击该表，然后在弹出的菜单中选择“MybatisX-Generate”选项，按需配置</li><li>点击“生成”按钮，MybatisX插件将根据选择自动生成相应的代码文件</li></ul><h2 id="DB静态工具">DB静态工具</h2>]]></content>
    
    
    <summary type="html">开始挖坑并填坑,小心被埋哦</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>并发操作下的订单状态更新策略优化与性能影响分析</title>
    <link href="https://pumpkin-ovo.github.io/2024/11/17/new%20orders/"/>
    <id>https://pumpkin-ovo.github.io/2024/11/17/new%20orders/</id>
    <published>2024-11-16T16:00:00.000Z</published>
    <updated>2024-11-17T03:03:39.144Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><p>在观看黑马的苍穹外卖系列教程中的用户取消订单功能代码开发时，我们注意到作者首先通过查询获取了被用户取消的订单的所有属性，并存储在ordersDB变量中<br>然而，在修改数据库时，作者并未直接对ordersDB变量进行操作，而是创建了一个新的Orders类型的orders变量，仅包含需要修改的属性，然后进行了update操作<br>详细代码如下</p><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">Orders.java</button></li><li class="tab"><button type="button" data-href="#-2">OrderServiceImpl.java</button></li><li class="tab"><button type="button" data-href="#-3">OrderMapper.xml</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orders</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单状态 1待付款 2待接单 3已接单 4派送中 5已完成 6已取消</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">PENDING_PAYMENT</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">TO_BE_CONFIRMED</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">CONFIRMED</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">DELIVERY_IN_PROGRESS</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">COMPLETED</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">CANCELLED</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付状态 0未支付 1已支付 2退款</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">UN_PAID</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">PAID</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">REFUND</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单号</span></span><br><span class="line">    <span class="keyword">private</span> String number;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单状态 1待付款 2待接单 3已接单 4派送中 5已完成 6已取消 7退款</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下单用户id</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址id</span></span><br><span class="line">    <span class="keyword">private</span> Long addressBookId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下单时间</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime orderTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结账时间</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime checkoutTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//支付方式 1微信，2支付宝</span></span><br><span class="line">    <span class="keyword">private</span> Integer payMethod;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//支付状态 0未支付 1已支付 2退款</span></span><br><span class="line">    <span class="keyword">private</span> Integer payStatus;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实收金额</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal amount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//备注</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//手机号</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//收货人</span></span><br><span class="line">    <span class="keyword">private</span> String consignee;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单取消原因</span></span><br><span class="line">    <span class="keyword">private</span> String cancelReason;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单拒绝原因</span></span><br><span class="line">    <span class="keyword">private</span> String rejectionReason;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单取消时间</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime cancelTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//预计送达时间</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime estimatedDeliveryTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配送状态  1立即送出  0选择具体时间</span></span><br><span class="line">    <span class="keyword">private</span> Integer deliveryStatus;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//送达时间</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime deliveryTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打包费</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> packAmount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//餐具数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> tablewareNumber;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//餐具数量状态  1按餐量提供  0选择具体数量</span></span><br><span class="line">    <span class="keyword">private</span> Integer tablewareStatus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userCancelById</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 根据id查询订单</span></span><br><span class="line">    <span class="type">Orders</span> <span class="variable">ordersDB</span> <span class="operator">=</span> orderMapper.getById(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校验订单是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (ordersDB == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OrderBusinessException</span>(MessageConstant.ORDER_NOT_FOUND);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单状态 1待付款 2待接单 3已接单 4派送中 5已完成 6已取消</span></span><br><span class="line">    <span class="keyword">if</span> (ordersDB.getStatus() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OrderBusinessException</span>(MessageConstant.ORDER_STATUS_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Orders</span>();</span><br><span class="line">    orders.setId(ordersDB.getId());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 订单处于待接单状态下取消，需要进行退款</span></span><br><span class="line">    <span class="keyword">if</span> (ordersDB.getStatus().equals(Orders.TO_BE_CONFIRMED)) &#123;</span><br><span class="line">        <span class="comment">//调用微信支付退款接口</span></span><br><span class="line">        weChatPayUtil.refund(</span><br><span class="line">                ordersDB.getNumber(), <span class="comment">//商户订单号</span></span><br><span class="line">                ordersDB.getNumber(), <span class="comment">//商户退款单号</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">0.01</span>),<span class="comment">//退款金额，单位 元</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">0.01</span>));<span class="comment">//原订单金额</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//支付状态修改为 退款</span></span><br><span class="line">        orders.setPayStatus(Orders.REFUND);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新订单状态、取消原因、取消时间</span></span><br><span class="line">    orders.setStatus(Orders.CANCELLED);</span><br><span class="line">    orders.setCancelReason(<span class="string">&quot;用户取消&quot;</span>);</span><br><span class="line">    orders.setCancelTime(LocalDateTime.now());</span><br><span class="line">    orderMapper.update(orders);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=<span class="string">&quot;update&quot;</span> parameterType=<span class="string">&quot;com.sky.entity.Orders&quot;</span>&gt;</span><br><span class="line">        update orders</span><br><span class="line">        &lt;set&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;cancelReason != null and cancelReason!=&#x27;&#x27; &quot;</span>&gt;</span><br><span class="line">                cancel_reason=#&#123;cancelReason&#125;,</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;rejectionReason != null and rejectionReason!=&#x27;&#x27; &quot;</span>&gt;</span><br><span class="line">                rejection_reason=#&#123;rejectionReason&#125;,</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;cancelTime != null&quot;</span>&gt;</span><br><span class="line">                cancel_time=#&#123;cancelTime&#125;,</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;payStatus != null&quot;</span>&gt;</span><br><span class="line">                pay_status=#&#123;payStatus&#125;,</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;payMethod != null&quot;</span>&gt;</span><br><span class="line">                pay_method=#&#123;payMethod&#125;,</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;checkoutTime != null&quot;</span>&gt;</span><br><span class="line">                checkout_time=#&#123;checkoutTime&#125;,</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;status != null&quot;</span>&gt;</span><br><span class="line">                status = #&#123;status&#125;,</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;deliveryTime != null&quot;</span>&gt;</span><br><span class="line">                delivery_time = #&#123;deliveryTime&#125;</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">        <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> #&#123;id&#125;</span><br><span class="line">    &lt;/update&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="原因分析">原因分析</h2><p>在Orders类中，属性众多，而update方法作为一个通用的数据库更新操作，可能涉及多个属性的修改<br>该方法在更新时，会根据传入的Orders对象中的属性值进行条件判断，若属性值非空则进行更新（有新数据就更新成最新数据，没有新数据就保持原样）<br>然而，在用户取消订单的场景中，实际需要修改的属性仅有三个：订单状态、取消原因和取消时间<br>所以有必要进行这么多次的判断和修改吗？<br>答案当然是没有<br>如果直接对ordersDB变量执行update操作，可能会引发以下两种问题</p><h3 id="并发操作下的更新覆盖问题">并发操作下的更新覆盖问题</h3><p>在并发环境下，多个用户可能同时对同一组数据进行操作<br>我们用一个例子来说明这个问题<br>用户A正在执行id修改update操作，希望将id由1修改为2<br>用户B执行了用户ID换绑操作，希望将userId由LN修改为LTC<br>由于数据库操作的原子性，这两个操作在数据库层面是串行执行的<br>然而，如果直接对ordersDB变量进行update，那么即使后一个操作（用户ID换绑）先完成，其更改也可能被前一个操作（更改id）中的update语句所覆盖</p><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">开始执行update</button></li><li class="tab"><button type="button" data-href="#-2">用户执行换绑操作</button></li><li class="tab"><button type="button" data-href="#-3">换绑执行结束</button></li><li class="tab"><button type="button" data-href="#-4">update执行结束</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">OrderDB:</span><br><span class="line">id: <span class="number">1</span></span><br><span class="line">number:<span class="number">3</span></span><br><span class="line">status:<span class="number">1</span><span class="operator">-</span><span class="operator">&gt;</span><span class="number">2</span> #修改状态为<span class="number">2</span></span><br><span class="line">userId: LN</span><br><span class="line">addressBookId: <span class="number">3</span></span><br><span class="line">orderTime:<span class="number">2024</span><span class="number">-11</span><span class="number">-15</span> <span class="number">13</span>:<span class="number">05</span>:<span class="number">06</span></span><br><span class="line">checkTime:<span class="number">2024</span><span class="number">-11</span><span class="number">-15</span> <span class="number">13</span>:<span class="number">05</span>:<span class="number">06</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">OrderDB:</span><br><span class="line">id: <span class="number">1</span></span><br><span class="line">number:<span class="number">3</span></span><br><span class="line">status: <span class="number">1</span></span><br><span class="line">userId: LN <span class="operator">-</span><span class="operator">&gt;</span>LTC #修改userId</span><br><span class="line">addressBookId:<span class="number">3</span></span><br><span class="line">orderTime:<span class="number">2024</span><span class="number">-11</span><span class="number">-15</span> <span class="number">13</span>:<span class="number">05</span>:<span class="number">07</span></span><br><span class="line">checkTime:<span class="number">2024</span><span class="number">-11</span><span class="number">-15</span> <span class="number">13</span>:<span class="number">05</span>:<span class="number">07</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">OrderDB:</span><br><span class="line">id: <span class="number">1</span></span><br><span class="line">number: <span class="number">3</span></span><br><span class="line">status: <span class="number">1</span></span><br><span class="line">userId: LTC</span><br><span class="line">addressBookId:<span class="number">3</span></span><br><span class="line">orderTime:<span class="number">2024</span><span class="number">-11</span><span class="number">-15</span> <span class="number">13</span>:<span class="number">05</span>:<span class="number">08</span></span><br><span class="line">checkTime:<span class="number">2024</span><span class="number">-11</span><span class="number">-15</span> <span class="number">13</span>:<span class="number">05</span>:<span class="number">08</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-4"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">OrderDB:</span><br><span class="line">id: <span class="number">1</span></span><br><span class="line">number:<span class="number">3</span></span><br><span class="line">status:<span class="number">2</span></span><br><span class="line">userId: LN #重新以<span class="number">1</span>的userld覆盖了刚才的更改</span><br><span class="line">addressBookId:<span class="number">3</span></span><br><span class="line">orderTime:<span class="number">2024</span><span class="number">-11</span><span class="number">-15</span> <span class="number">13</span>:<span class="number">05</span>:<span class="number">06</span></span><br><span class="line">checkTime:<span class="number">2024</span><span class="number">-11</span><span class="number">-15</span> <span class="number">13</span>:<span class="number">05</span>:<span class="number">06</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>为了避免这种并发操作下的更新覆盖问题，作者选择创建一个新的Orders对象orders，仅包含需要修改的属性，并对其进行update操作。这样，即使存在并发操作，也只会影响需要修改的属性，而不会覆盖其他属性的更改。</p><h3 id="增加的-Binlog-日志数量及性能影响">增加的 Binlog 日志数量及性能影响</h3><p>当选择直接修改现有的 ordersDB 数据库中的表结构或数据记录时<br>每次修改（无论是添加、删除还是更新数据）都会被记录在 MySQL 的二进制日志（binlog）中<br>这些日志对于数据恢复、复制和审计至关重要，然而，如果频繁地对大型表进行结构修改或大量数据更新，会导致 binlog 日志量显著增加</p><h2 id="总结">总结</h2><p>在进行数据库更新操作时，通过创建新的对象并仅修改需要更新的属性，可以有效地避免并发操作下的更新覆盖问题，并减少不必要的binlog日志生成，从而优化数据库性能和稳定性</p>]]></content>
    
    
    <summary type="html">并发操作下的更新覆盖问题及其解决方案</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>helloworld</title>
    <link href="https://pumpkin-ovo.github.io/2024/11/14/helloworld-md/"/>
    <id>https://pumpkin-ovo.github.io/2024/11/14/helloworld-md/</id>
    <published>2024-11-14T15:45:18.000Z</published>
    <updated>2024-11-20T02:59:57.774Z</updated>
    
    <content type="html"><![CDATA[<p>存储一些我要用的markdown语法</p><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">```java</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
    <summary type="html">一些乱七八糟</summary>
    
    
    
    
  </entry>
  
</feed>
